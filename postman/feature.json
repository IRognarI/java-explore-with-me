{
	"info": {
		"_postman_id": "78ffb22e-337b-4cd9-bc14-647c894bd147",
		"name": "\"Explore With Me\" API комментарии",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44855305"
	},
	"item": [
		{
			"name": "Новый комментарий без рейтинга",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"Great!!\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate).to.be.null;\r",
							"    pm.expect(target.status).equal('PENDING', 'Статус нового комментария должен быть PENDING');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id мероприятия"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий к неопубликованному событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        \r",
							"        // Don't publish event !!!\r",
							"        // await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"Great!!\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавить дублирующий комментарий",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        await api.addComment(user.id, event.id, \"Normal\", null);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"Great!!\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий без текста",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий из пробелов",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"        \", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий длиной больше 1000 символов",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : rnd.getWord(1001), rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий с рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        await api.publishParticipationRequest(event.id, user.id, true);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"It's quite normal\", rate : 4}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate).to.not.be.null; // Added this line to prevent TypeError\r",
							"    pm.expect(target.rate.toString()).equal(source.rate.toString(), 'Рейтинг должен соответствовать рейтингу в запросе');\r",
							"    pm.expect(target.status).equal('PENDING', 'Статус нового комментария должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий с нулевым рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        await api.publishParticipationRequest(event.id, user.id, true);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"It's quite normal\", rate : 0}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий с рейтингом больше 5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        await api.publishParticipationRequest(event.id, user.id, true);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"Shock!!!\", rate : 6}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый комментарий с рейтингом без участия",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        console.log('Initiator id=' + initiator.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        console.log('Event id=' + event.id);\r",
							"        console.log('Event title=' + event.title);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        console.log('User id=' + user.id);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"It's quite normal\", rate : 4}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "id события"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария без рейтинга",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(user.id, event.id, \"Great!!\", null);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"No so great really\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id.toString()).equal(pm.collectionVariables.get('cid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate).to.be.null;\r",
							"    pm.expect(target.status).equal('PENDING', 'Статус обновленного комментария должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария с рейтингом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        await api.publishParticipationRequest(event.id, user.id, true);\r",
							"        const comment = await api.addComment(user.id, event.id, \"Great!!\", 5);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"No so great really\", rate : 2}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id.toString()).equal(pm.collectionVariables.get('cid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate.toString()).equal(source.rate.toString(), \"Оценка комментария должна соответствовать оценке в запросе\");\r",
							"    pm.expect(target.status).equal('PENDING', 'Статус обновленного комментария должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление согласованного комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        let comment = await api.addComment(user.id, event.id, \"Great!!\", null);\r",
							"        comment = await api.approveComment(comment.id);\r",
							"        pm.collectionVariables.set('sourceStatus', comment.status);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({text : \"No so great really\", rate : null}),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id.toString()).equal(pm.collectionVariables.get('cid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(source.text, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate).to.be.null;\r",
							"    pm.expect(pm.collectionVariables.get('sourceStatus')).equal('APPROVED', 'Статус согласованного комментария должен был быть APPROVED');\r",
							"    pm.expect(target.status).equal('PENDING', 'Статус обновленного комментария должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(user.id, event.id, \"Great!!\", null);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"        pm.collectionVariables.set('commentText', comment.text)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('event');\r",
							"    pm.expect(target).to.have.property('commenter');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"    pm.expect(target).to.have.property('rate');\r",
							"    pm.expect(target).to.have.property('status');\r",
							"    pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.id.toString()).equal(pm.collectionVariables.get('cid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.event.toString()).equal(pm.collectionVariables.get('eid').toString(), 'Id события должен соответствовать параметру запроса');\r",
							"    pm.expect(target.commenter.toString()).equal(pm.collectionVariables.get('uid').toString(), 'Id автора комментария должен соответствовать параметру запроса');\r",
							"    pm.expect(target.text).equal(pm.collectionVariables.get('commentText'), 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.rate).to.be.null;\r",
							"    pm.expect(target.status).equal('REJECTED', 'Статус обновленного комментария должен быть REJECTED');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?status=REJECTED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "status",
							"value": "REJECTED"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение статуса комментария с ошибочным параметром",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(user.id, event.id, \"Great!!\", null);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"        pm.collectionVariables.set('commentText', comment.text)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?status=PENDING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "status",
							"value": "PENDING"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение статуса согласованного комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 2;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(user.id, event.id, \"Great!!\", null);\r",
							"        await api.approveComment(comment.id);\r",
							"        \r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('cid', comment.id);\r",
							"        pm.collectionVariables.set('commentText', comment.text)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId?status=REJECTED",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"query": [
						{
							"key": "status",
							"value": "REJECTED"
						}
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody1 = rnd.getEvent(category.id);\r",
							"        eventBody1['requestModeration'] = false;\r",
							"        eventBody1['participantLimit'] = 0;\r",
							"        const event1 = await api.addEvent(initiator.id, eventBody1);\r",
							"        await api.publishEvent(event1.id);\r",
							"\r",
							"        let eventBody2 = rnd.getEvent(category.id);\r",
							"        eventBody2['requestModeration'] = false;\r",
							"        eventBody2['participantLimit'] = 0;\r",
							"        const event2 = await api.addEvent(initiator.id, eventBody2);\r",
							"        await api.publishEvent(event2.id);\r",
							"\r",
							"        let eventBody3 = rnd.getEvent(category.id);\r",
							"        eventBody3['requestModeration'] = false;\r",
							"        eventBody3['participantLimit'] = 0;\r",
							"        const event3 = await api.addEvent(initiator.id, eventBody1);\r",
							"        await api.publishEvent(event3.id);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.publishParticipationRequest(event1.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event2.id, user2.id, true);\r",
							"        await api.publishParticipationRequest(event3.id, user1.id, true);\r",
							"\r",
							"        await api.addComment(user1.id, event1.id, \"Great!!\", 4);\r",
							"        await api.addComment(user2.id, event2.id, \"Super\", 5);\r",
							"        await api.addComment(user1.id, event3.id, \"Not a very interesting event.\", 2);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user1.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив комментариев из 2-х элементов\", function () {\r",
							"    pm.expect(target).to.be.an('array');\r",
							"    pm.expect(target).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент списка комментариев должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('event');\r",
							"    pm.expect(target[0]).to.have.property('commenter');\r",
							"    pm.expect(target[0]).to.have.property('text');\r",
							"    pm.expect(target[0]).to.have.property('rate');\r",
							"    pm.expect(target[0]).to.have.property('status');\r",
							"    pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент события должен иметь внутренние поля объекта EventShortDto\", function () {\r",
							"    pm.expect(target[0].event).to.have.property('id');\r",
							"    pm.expect(target[0].event).to.have.property('annotation');\r",
							"    pm.expect(target[0].event).to.have.property('category');\r",
							"    pm.expect(target[0].event).to.have.property('confirmedRequests');\r",
							"    pm.expect(target[0].event).to.have.property('eventDate');\r",
							"    pm.expect(target[0].event).to.have.property('initiator');\r",
							"    pm.expect(target[0].event).to.have.property('paid');\r",
							"    pm.expect(target[0].event).to.have.property('title');\r",
							"    pm.expect(target[0].event).to.have.property('views');\r",
							"    pm.expect(target[0].event).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Все комментарии в списке должны принадлежать пользователю \" + pm.collectionVariables.get('uid'), function () {\r",
							"    pm.expect(target[0].commenter).equal(pm.collectionVariables.get('uid'));\r",
							"    pm.expect(target[1].commenter).equal(pm.collectionVariables.get('uid'));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody1 = rnd.getEvent(category.id);\r",
							"        eventBody1['requestModeration'] = false;\r",
							"        eventBody1['participantLimit'] = 0;\r",
							"        const event1 = await api.addEvent(initiator.id, eventBody1);\r",
							"        await api.publishEvent(event1.id);\r",
							"\r",
							"        let eventBody2 = rnd.getEvent(category.id);\r",
							"        eventBody2['requestModeration'] = false;\r",
							"        eventBody2['participantLimit'] = 0;\r",
							"        const event2 = await api.addEvent(initiator.id, eventBody2);\r",
							"        await api.publishEvent(event2.id);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.publishParticipationRequest(event1.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event1.id, user3.id, true);\r",
							"        await api.publishParticipationRequest(event2.id, user2.id, true);\r",
							"\r",
							"        await api.addComment(user1.id, event1.id, \"Great!!\", 4);\r",
							"        await api.addComment(user2.id, event2.id, \"Super\", 5);\r",
							"        await api.addComment(user3.id, event1.id, \"Not a very interesting event.\", 2);\r",
							"\r",
							"        pm.collectionVariables.set('eid', event1.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив комментариев из 2-х элементов\", function () {\r",
							"    pm.expect(target).to.be.an('array');\r",
							"    pm.expect(target).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент списка комментариев должен содержать поля: id, event, commenter, text, rate, status, created\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('event');\r",
							"    pm.expect(target[0]).to.have.property('commenter');\r",
							"    pm.expect(target[0]).to.have.property('text');\r",
							"    pm.expect(target[0]).to.have.property('rate');\r",
							"    pm.expect(target[0]).to.have.property('status');\r",
							"    pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент комментатора должен иметь внутренние поля объекта UserShortDto\", function () {\r",
							"    pm.expect(target[0].commenter).to.have.property('id');\r",
							"    pm.expect(target[0].commenter).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Все комментарии в списке должны относиться к событию \" + pm.collectionVariables.get('eid'), function () {\r",
							"    pm.expect(target[0].event).equal(pm.collectionVariables.get('eid'));\r",
							"    pm.expect(target[1].event).equal(pm.collectionVariables.get('eid'));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение рейтинга события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false;\r",
							"        eventBody['participantLimit'] = 0;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('annotation', event.annotation);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.publishParticipationRequest(event.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event.id, user2.id, true);\r",
							"\r",
							"        const comment1 = await api.addComment(user1.id, event.id, \"Great!!\", 4);\r",
							"        await api.approveComment(comment1.id);\r",
							"        const comment2 = await api.addComment(user2.id, event.id, \"Super\", 5);\r",
							"        await api.approveComment(comment2.id);\r",
							"\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Элемент должен содержать поля: id, annotation, rating\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('annotation');\r",
							"    pm.expect(target).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Значения полей должны соответствовать исходному событию\", function () {\r",
							"    pm.expect(target.id).equal(pm.collectionVariables.get('eid'));\r",
							"    pm.expect(target.annotation).equal(pm.collectionVariables.get('annotation'));\r",
							"});\r",
							"\r",
							"pm.test(\"Рейтинг события должен быть равен 4.5\", function () {\r",
							"    pm.expect(target.rating).equal(4.5);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка событий по уменьшению рейтинга",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        \r",
							"        let eventBody1 = rnd.getEvent(category.id);\r",
							"        eventBody1['requestModeration'] = false;\r",
							"        eventBody1['participantLimit'] = 0;\r",
							"        const event1 = await api.addEvent(initiator.id, eventBody1);\r",
							"        await api.publishEvent(event1.id);\r",
							"\r",
							"        let eventBody2 = rnd.getEvent(category.id);\r",
							"        eventBody2['requestModeration'] = false;\r",
							"        eventBody2['participantLimit'] = 0;\r",
							"        const event2 = await api.addEvent(initiator.id, eventBody2);\r",
							"        await api.publishEvent(event2.id);\r",
							"\r",
							"        let eventBody3 = rnd.getEvent(category.id);\r",
							"        eventBody3['requestModeration'] = false;\r",
							"        eventBody3['participantLimit'] = 0;\r",
							"        const event3 = await api.addEvent(initiator.id, eventBody1);\r",
							"        await api.publishEvent(event3.id);\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        await api.publishParticipationRequest(event1.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event1.id, user2.id, true);\r",
							"        await api.publishParticipationRequest(event2.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event2.id, user2.id, true);\r",
							"        await api.publishParticipationRequest(event3.id, user1.id, true);\r",
							"        await api.publishParticipationRequest(event3.id, user2.id, true);\r",
							"\r",
							"        const comment1 = await api.addComment(user1.id, event1.id, \"So bad\", 2);\r",
							"        const comment2 = await api.addComment(user1.id, event2.id, \"So good\", 4);\r",
							"        const comment3 = await api.addComment(user1.id, event3.id, \"Not interesting\", 3);\r",
							"        const comment4 = await api.addComment(user2.id, event1.id, \"Done. Forget\", 3);\r",
							"        const comment5 = await api.addComment(user2.id, event2.id, \"Great!!\", 5);\r",
							"        const comment6 = await api.addComment(user2.id, event3.id, \"Average\", 3);\r",
							"\r",
							"        await api.approveComment(comment1.id);\r",
							"        await api.approveComment(comment2.id);\r",
							"        await api.approveComment(comment3.id);\r",
							"        await api.approveComment(comment4.id);\r",
							"        await api.approveComment(comment5.id);\r",
							"        await api.approveComment(comment6.id);\r",
							"\r",
							"        pm.collectionVariables.set('eventId1', event1.id);\r",
							"        pm.collectionVariables.set('eventId2', event2.id);\r",
							"        pm.collectionVariables.set('eventId3', event3.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать массив событий из не менее 3-х элементов\", function () {\r",
							"    pm.expect(target).to.be.an('array');\r",
							"    pm.expect(target.length).to.be.at.least(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Элемент списка событий должен содержать поля: id и rating\", function () {\r",
							"    pm.expect(target[0]).to.have.property('id');\r",
							"    pm.expect(target[0]).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Все события в списке должны быть отсортированы по уменьшению рейтинга\", function () {\r",
							"    const n = target.length;\r",
							"    let r = target[0].rating;\r",
							"    for (let i = 0; i < n; i++) {\r",
							"        pm.expect(target[i].rating).to.be.at.most(r);\r",
							"        r = target[i].rating;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events?sort=RATINGS",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "RATINGS"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, text, rate, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", \r",
					"                {text: text, rate: rate},\r",
					"                \"Ошибка при добавлении нового комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    async approveComment(commentId, verbose=null) {\r",
					"        return this.patch(\"/admin/comments/\" + commentId + '?status=APPROVED', null, \"Ошибка при модерации комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    async rejectComment(commentId, verbose=null) {\r",
					"        return this.patch(\"/admin/comments/\" + commentId + '?status=REJECTED', null, \"Ошибка при отклонении комментария\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "userCount",
			"value": "1"
		},
		{
			"key": "catid",
			"value": "1"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": "1"
		},
		{
			"key": "compid",
			"value": "1"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": "1"
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromid",
			"value": ""
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "cid",
			"value": ""
		},
		{
			"key": "sourceStatus",
			"value": ""
		},
		{
			"key": "commentText",
			"value": ""
		},
		{
			"key": "annotation",
			"value": ""
		},
		{
			"key": "eventId1",
			"value": ""
		},
		{
			"key": "eventId2",
			"value": ""
		},
		{
			"key": "eventId3",
			"value": ""
		}
	]
}